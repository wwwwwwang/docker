Docker是一个开源的应用器引擎，基于Go语言并遵从Apache2.0协议开源
Docker可以让开发者打包他们的引用以及依赖包包一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化；
容器是完全使用沙箱机智，互相之间不会有任何接口，更重要的是容器性能开销极低。

Docker的应用场景
Web应用的自动化打包和发布；自动化测试和持续集成、发布；在服务型环境中部署和调整数据库或其他的后台应用；从头编译或者扩展现有的OpenShift或是CloudFoundry平台来搭建自己的PaaS环境；

Docker的优点
1.简化程序；2.避免选择恐惧症；3.节省开支。

Docker架构
客户端-服务器（C/S）架构模式，使用远程API来管理和创建Docker容器；
Docker容器通过Docker镜像来创建；
容器与镜像的关系类似于面向对象编程中的对象与类

Docker镜像（Images） Docker镜像是用于创建Docker容器的模板；
Docker容器（container） 独立运行的一个或是一组应用；
Docker客户端（Client）通过命令行或是其他工具使用Docker API与Docker的守护进程通信
Docker主机（Host） 一个物理或是虚拟的机器用于执行Docker守护进程或容器；
Docker仓库（Registry）用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub（https://hub.docker.com）提供了庞大的镜像集合供使用；
DockerMachine 一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox，Digital Ocean，Microsoft Azure。


Docker linux安装
需要：Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。
从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。
yum安装CE版：
1.移除旧的版本：
sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-selinux \
                  docker-engine-selinux \
                  docker-engine
2.yum更新到最新：
sudo yum update
3.安装必要的系统工具：
sudo yum install -y yum-utils device-mapper-persistent-data lvm2
4.添加软件源信息：
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
5.更新yum缓存
sudo yum makecache fast
6.安装Docker-ce：
sudo yum -y install docker-ce
7.镜像加速
鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。

新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\docker\config\daemon.json（Windows） 来配置 Daemon。

请在该配置文件中加入（没有该文件的话，请先建一个）：
{
  "registry-mirrors": ["http://hub-mirror.c.163.com"]
}
8.启动Docker后台服务
sudo systemctl start docker
9.测试运行hello-world
docker run hello-world
10.删除DockerCE
sudo yum remove docker-ce
sudo rm -rf /var/lib/docker


Docker windows安装
Docker windows版（https://docs.docker.com/docker-for-windows/）仅支持win10高级版，专业版，其他版本（win7，win8，win10家庭版）只能使用docker-toolbox来进行安装（https://docs.docker.com/toolbox/toolbox_install_windows/）

win10家庭版安装流程：
1.下载Docker-toolbox，地址是https://download.docker.com/win/stable/DockerToolbox.exe
2.双击exe文件进行安装，更改成适当的路径，其他不需要修改，安装完成后会出现Oracle VM VirtualBox、Kitematic (Alpha)、Docker Quickstart Terminal三个图标；
3.点击Docker Quickstart Terminal进行初始化配置，用户权限弹窗选“是”；
4.初始化完成后终端会出现$符号，此时输入docker version进行验证；


Docker hello-world

docker run ubuntu:15.10 /bin/echo "Hello world"
docker:Docker的二进制执行文件；
run：与前面的docker组合来运行一个容器；
ubuntu:15.10：指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker就会从镜像仓库Docker hub下载公共镜像；
/bin/echo "hello world!"：在启动的容器里执行的命令；
整个命令可解释为：Docker以ubuntu 15.10为镜像创建一个新的容器，并在这个容器里执行 /bin/echo "hello world!"，然后输出结果。

运行交互式容器
docker run -i -t ubuntu:15.10 /bin/bash
-t:在新的容器内指定一个伪终端或终端；
-i:允许你对容器内的标准输入（STDIN）进行交互；

启动容器（后台模式）
docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"
-d, --detach    Run container in background and print container ID

docker ps
docker logs id||name
docker stop id||name


docker 常用命令：
docker --version
docker image ls
docker container ls --all

docker --help
docker container --help
docker container ls --help
docker run --help

Docker 容器使用
docker stats --help
运行一个web应用
docker pull training/webapp
pull：Pull an image or a repository from a registry

docker run -d -P training/webapp python app.py
-d:让容器在后台运行； -P:将容器内部使用的网络端口映射到我们使用的主机上；

docker run -d -p 5000:5000 training/webapp python app.py

docker-machine ip 获取ip，然后再加上对应端口在web页面打开

docker ps 
docker ps -a 显示所有的容器
docker ps -l 查询最后一次创建的容器；
docker logs id||name
docker top id||name
docker inspect id||name 
docker stop id||name
docker start id||name
docker restart id||name
docker rm id||name



Docker镜像使用
docker images
REPOSITORY:表示镜像的仓库源；
TAG：镜像的标签；
IMAGE ID：镜像id；
CREATED：镜像的创建时间；
SIZE：镜像大小

获取镜像：docker pull REPOSITORY:TAG 
使用 REPOSITORY:TAG 来定义不同的镜像
查找镜像：docker search XXX
创建镜像：
1.从已经创建的容器中更新镜像，并且提交这个镜像
2.使用 Dockerfile 指令来创建一个新的镜像

更新镜像：
1.使用镜像创建一个容器：docker run -t -i ubuntu:15.10 /bin/bash
2.在运行的容器使用apt-get update命令进行更新；
3.在完成操作之后，输入exit命令来退出运行的容器；
4.使用下面命令来提交容器副本：
docker commit -m="has update" -a="runoob"  e218edb10161 runoob/ubuntu:v2
-m:提交的描述信息；-a:指定镜像作者； e218edb10161：容器ID；
runoob/ubuntu:v2 要创建的目标镜像名称

构建镜像：
使用docker build命令，从零开始创建一个新的镜像。我们需要创建一个Dockerfile文件，其中包含一组指令来告诉Docker如何构建我们的镜像。
cat Dockerfile 

FROM    centos:6.7
MAINTAINER      Fisher "fisher@sudops.com"

RUN     /bin/echo 'root:123456' |chpasswd
RUN     useradd runoob
RUN     /bin/echo 'runoob:123456' |chpasswd
RUN     /bin/echo -e "LANG=\"en_US.UTF-8\"" >/etc/default/local
EXPOSE  22
EXPOSE  80
CMD     /usr/sbin/sshd -D


设置镜像标签
docker tag 860c279d2fec runoob/centos:dev
docker tag id REPOSITORY:TAG


Docker容器连接
网络端口映射
docker run -d -P training/webapp python app.py
-P :是容器内部端口随机映射到主机的高端口。
-p :是容器内部端口绑定到指定的主机端口。
docker run -d -p 5000:5000 training/webapp python app.py
docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py
docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py

端口映射并不是唯一把docker连接到另一个容器的方法，docker有一个连接系统允许将多个容器连接在一起，共享连接信息。docker连接会创建一个父子关系，其中父容器可以看到子容器的信息。

容器命名
当我们创建一个容器时，docker会自动对它进行命名。另外，我们可以使用--name标识来命名容器，例如：
docker run -d -P --name runoob training/webapp python app.py

【1】Docker安装Nginx
docker pull nginx
1.docker search nginx
2.docker pull nginx
3.docker images nginx
4.运行 docker run -d -P nginx

docker run --name mynginx -p 80:80 -d nginx

【2】Docker安装Php
docker pull php
1.docker search php
2.docker pull php
3.docker images php
4.docker run -d -P php

nginx/conf.d/default.conf
server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    location ~ \.php$ {
        fastcgi_pass   php:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /var/www/html/$fastcgi_script_name;
        include        fastcgi_params;
    }
}

docker run --name php-whsh -d -v /d/Users/Madhouse/DockerToolbox/whsh/www:/var/www/html php:7.1-fpm


docker run --name nginx-whsh -p 80:80 -d -v /d/Users/Madhouse/DockerToolbox/whsh/www:/usr/share/nginx/html --link php-whsh:php nginx


============================================================================

docker run -d -v /d/www/html:/usr/share/nginx/html --name php-fpm docker.io/bitnami/php-fpm 

docker run -d --name nginx -p 8888:80 -v /d/www/html:/usr/share/nginx/html docker.io/nginx


docker inspect --format='{{.Name}} - {{ range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)

/nginx - 172.17.0.3
/php-fpm - 172.17.0.2

docker cp nginx:/etc/nginx/conf.d/default.conf ./default.conf
vi default.conf
server_name  172.17.0.3;
location ~ \.php$ {
    root           html;
    fastcgi_pass   172.17.0.2:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html/$fastcgi_script_name;
    include        fastcgi_params;
}
docker cp default.conf  nginx:/etc/nginx/conf.d/default.conf
docker restart nginx



命令：
导出容器
docker export 7691a814370e > ubuntu.tar
导入容器
cat ubuntu.tar | docker import - test/ubuntu:v1.0
查看容器
docker container ls -a
杀死所有容器
docker kill $(docker ps -a -q)
删除所有容器
docker rm $(docker ps -a -q)
删除所有未打dangling标签的镜像
docker rmi $(docker images -q -f dangling=true)
删除所有终止状态的容器
docker container prune
通过镜像id来删除指定镜像
docker rmi 镜像id
列出部分镜像
docker image ls XXXX
docker image ls -f since/before=mongo:3.2
删除所有镜像
docker rmi $(docker images -q)
查看镜像、容器、数据卷所占用的空间
docker system df
查看历史
docker history username/imagename:tag

虚悬镜像(dangling image)
显示虚悬镜像
docker image ls -f dangling=true 
删除虚悬镜像
docker image prune


Dockerfile定制镜像
1.FROM 指定基础镜像
Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。
2.RUN 执行命令
仅仅使用一个 RUN 指令，并使用 && 将各个所需命令串联起来；
&& apt-get purge -y --auto-remove $buildDeps
3.构建镜像
docker build -t nginx:v3 .
-t tag，指定要创建的目标镜像名  .:镜像构建上下文（Context）

Dockerfile其他命令
COPY 复制文件
将从构建上下文目录中 <源路径> 的文件/目录复制到新的一层的镜像
内的 <目标路径> 位置；
用该指令的时候还可以加上 --chown=<user>:<group> 选项来改变文件的所
属用户及所属组

ADD 更高级的复制文件
此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复
制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD

CMD 容器启动命令
在启动容器的时候，需要指定所运行的程序及参数；
CMD echo $HOME => CMD [ "sh", "-c", "echo $HOME" ]
容器中的应用都应该以前台执行，容器内没有后台服务的概念；
CMD service nginx start => CMD ["sh", "-c", "service nginx start"]  XXXX
因此主进程实际上是 sh 。那么当service nginx start 命令结束后， sh 也就结束了， sh作为主进程退出了，自然就会令容器退出;
正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：
CMD ["nginx", "-g", "daemon off;"]

ENTRYPOINT 入口点
ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数;
当指定了 ENTRYPOINT 后， CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：
<ENTRYPOINT> "<CMD>"

ENV 设置环境变量
ENV <key> <value>
ENV <key1>=<value1> <key2>=<value2>...
设置环境变量而已，后面的其它指令都可以直接使用这里定义的环境变量

ARG 构建参数

VOLUME 定义匿名卷
容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷。

EXPOSE 声明端口

WORKDIR 指定工作目录
使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），如该目录不存在， WORKDIR 会帮你建立目录

USER 指定当前用户
格式： USER <用户名>[:<用户组>]
这个用户必须是事先建立好的，否则无法切换
RUN groupadd -r redis && useradd -r -g redis redis
USER redis
RUN [ "redis-server" ]

HEALTHCHECK 健康检查
HEALTHCHECK [选项] CMD <命令> ：设置检查容器健康状况的命令
用其启动容器，初始状态会为starting ，在 HEALTHCHECK 指令检查成功后变为 healthy ，如果连续一定次数失败，则会变为 unhealthy
HEALTHCHECK --interval=5s --timeout=3s CMD curl -fs http://localhost/ || exit 1
为了帮助排障，健康检查命令的输出（包括 stdout 以及 stderr ）都会被存储于健康状态里，可以用 docker inspect 来查看。
docker inspect --format '{{json .State.Health}}' web | python -m json.tool

ONBUILD 为他人做嫁衣裳
ONBUILD 是一个特殊的指令，后面跟的是其它指令（RUN , COPY 等） 在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。



Docker私有仓库
win7修改私有仓库地址：
1.进入docker terminal， 执行docker-machine ls，找到需要修改的虚拟机名，默认是default
2.docker-machine ssh default，进入到虚拟机bash中；
3.使用root权限编辑profile文件，sudo vi /var/lib/boot2docker/profile
4.在EXTRA_ARGS=''，中增加--insecure-registry xxx.xxx.xxx.xxx:yyyy,其为ip:port
5.在当前虚拟机中（default），重启docker，sudo /etc/init.d/docker restart
6.执行exit命令从虚拟机中退出到windows terminal中
7.在windows terminal中，重启刚刚修改的虚拟机（default）， docker-machine restart


Docker数据卷
创建一个数据卷
docker volume create my-vol
查看所有的数据卷
docker volume ls
查看指定的数据卷
docker volume inspect my-vol
删除数据卷
docker volume rm my-vol
删除无主数据卷
docker volume prune

Windows数据目录挂载
1.在VM virtualbox中设置好共享文件夹，包括名字和路径，并记住名字(DockerToolbox)，后面要用；
2.打开win docker terminal，执行docker-machine ls 查看虚拟机名称；
3.执行docker-machine ssh default（所要进入的虚拟节名称），进入虚拟机；
4.在虚拟机中执行 echo "$USER",查看当前用户，如不是root，再执行 sudo -i，切换成root用户；
5.在虚拟机中创建windows共享文件所要挂载的目录，如/mnt/docker
6.执行如下命令，sudo mount -t vboxsf DockerToolbox /mnt/docker，将windows下的共享文件夹挂载到虚拟机的/mnt/docker目录下；
7.进入/mnt/docker目录查看是否有windows目录下的文件；
8.如想取消挂载执行命令，sudo umount DockerToolbox;
9.docker run --name test -it -p 20000:80 -d -v /mnt/docker/www:/usr/share/nginx/html nginx,测试下会不会在windows的路径下生成www文件夹。



docker-machine
docker-machine -v
创建本地主机实例
docker-machine create -d virtualbox test
可加上如下参数：
--engine-opt dns=114.114.114.114 配置docker默认的DNS；
--engine-registry-mirror https://registry.docker-cn.com 配置docker的仓库镜像；
--virtualbox-memory 2048 配置主机内存；
--virtualbox-cpu-count 2 配置主机cpu；


docker-machine ls
docker-machine env test 使用env命令让后续操作对象都是目标主机；
docker-machine ssh test ssh登录到主机；

active 查看活跃的docker主机；
config 输出连接的配置信息；
create 创建一个docker主机；
env 显示连接到某个主机需要的环境变量；
inspect 输出主机更多的信息；
ip 获取主机ip；
kill 停止某个主机；
ls 列出所有管理的主机；
provision 重新设置一个存在的主机；
regenerate-certs 为某个主机重新生成TLS认证信息；
restart 重启主机；
rm 删除某台主机；
ssh ssh到主机上执行命令；
scp 在主机之间复制文件；
mount 改在主机目录到本地；
start 启动一个主机；
status 查看一个主机的状态；
stop 停止主机；
update 更新主机docker版本为最新；
url 获取主机的url；
version 输出docker-machine版本信息；
help 输出帮助信息；



docker Swarm

Swarm mode已经嵌入docker引擎，成为了docker子命令 docker swarm
Swarm mode内置kv存储功能，提供新特性：具有容错能力的去中心化设计、内置服务发现、负载均衡、路由网格、动态伸缩、滚动更新、安全传输等；使得docker原生的swarm集群具备与mesos、kubernetes竞争的实力。

概念：节点、服务和任务、
节点
docker主机是一个节点，可以初始化或是加入一个swarm集群。
节点分为：管理manager节点和工作worker节点
docker swarm命令基本上都是在管理节点上执行，一个集群可以有多个管理节点，但是只有一个管理节点能够成为leader，通过raft协议选举产生。

服务和任务
任务（task）是swarm的最小调度单位，目前来说就是一个单一的容器；
服务（service）是指一组任务的集合，服务定义了任务的属性。
服务有两种模式：replicated services or global services，通过docker service create --mode参数来指定。

创建swarm集群
1.初始化集群
docker-machine create -d virtualbox manager
docker-machine ssh manager

docker swarm init --advertise-addr 192.168.99.101
docker swarm join --token SWMTKN-1-58d70z8xyf9qh0wghpa860s9pe3k6rro0xgmec34n1lv5j4as1-6qkn4ns2jepf06sl41kry1r4d 192.168.99.101:2377
2.增加工作节点
docker-machine create -d virtualbox worker1
docker-machine ssh worker1
docker swarm join --token SWMTKN-1-58d70z8xyf9qh0wghpa860s9pe3k6rro0xgmec34n1lv5j4as1-6qkn4ns2jepf06sl41kry1r4d 192.168.99.101:2377

docker-machine create -d virtualbox worker2
docker-machine ssh worker2
docker swarm join --token SWMTKN-1-58d70z8xyf9qh0wghpa860s9pe3k6rro0xgmec34n1lv5j4as1-6qkn4ns2jepf06sl41kry1r4d 192.168.99.101:2377
3.查看集群
切换活跃主机：eval $(docker-machine env v_name)
docker node ls

4.部署服务
使用docker service命令来管理swarm集群中的服务，只能在管理节点运行；

新建：
docker service create --replicas 3 -p 80:80 --name nginx nginx:1.13.7-alpine
查看：
docker service ls
查看详情：
docker service ps nginx
查看日志：
docker service logs nginx
5.服务伸缩
docker service scale nginx=5
docker service scale nginx=2
6.删除服务
docker service rm nginx


docker run --net=host -d gcr.io/google_containers/etcd:2.0.9 /usr/local/bin/etcd --addr=127.0.0.1:4001 --bind-addr=0.0.0.0:4001 --data-dir=/var/etcd/data
